@model OfferManagement.Models.ChartsFilterModel
@{
    ViewBag.Title = @System.Configuration.ConfigurationManager.AppSettings["Charts"];
}
<div class="text-center"><h2>@ViewBag.Title</h2></div>

<hr />
<br />

<script>

    $(document).ready(function () {

        var labNamefull;
        let pallet = ["#0074D9", "#FF4136", "#2ECC40", "#FF851B", "#7FDBFF",
            "#B10DC9", "#FFDC00", "#001f3f", "#39CCCC", "#01FF70", "#85144b",
            "#F012BE", "#3D9970", "#111111", "#AAAAAA"];

        $('#fromDatePicker').datetimepicker({
            format: 'm/d/Y',
            theme: 'dark',
            timepicker: false,
            maxDate: new Date()
        });


        $('#toDatepicker').datetimepicker({
            format: 'm/d/Y',
            theme: 'dark',
            timepicker: false,
            maxDate: new Date()
        }
        );

        function getColors(length) {
          
            let colors = [];

            for (let i = 0; i < length; i++) {
                colors.push(pallet[i % pallet.length]);
            }

            return colors;
        }


        var chartColors = {
            red: 'rgb(255, 99, 132)',
            orange: 'rgb(255, 159, 64)',
            yellow: 'rgb(255, 205, 86)',
            green: 'rgb(75, 192, 192)',
            blue: 'rgb(54, 162, 235)',
            purple: 'rgb(153, 102, 255)',
            grey: 'rgb(231,233,237)'
        };

        LoadCharts();

        $(document).on("click", "#btnsubmit", function (e) {

            var fromDate = $('#fromDatePicker').val();

            var toDate = $('#toDatepicker').val();

            if (Date.parse(fromDate) <= Date.parse(toDate)) {
                LoadCharts();
            }
            else {
                alert("ToDate can't be greater than FromDate!");
            }


        });

        function LoadCharts() {

            var fromDate = $('#fromDatePicker').val();

            var toDate = $('#toDatepicker').val();

            labNamefull = $("#ddlLabName option:selected").text();

            if (labNamefull != 'All') {
                labNamefull = labNamefull.slice(3)
            }

            var params = {
                'fromDate': fromDate,
                'toDate': toDate,
                'labName': labNamefull,
            };

            LoadCallVolume(params);

            LoadCallPurpose(params);

            LoadCallTrend(params);
        };

        var callVolumeData;

        var CallPurposeData;

        var callTrendData;

        function LoadCallVolume(chartFilter)
        {


           $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetCallVolume", "CRMCalls")',
                    data: chartFilter,
                    success: function (data) {
                        LoadCallVolumeData(data);
                    },
                    error: function (ex) {
                        console.log(ex);
                    }
                 });
        };

        function LoadCallPurpose(chartFilter)
        {

                       $.ajax({
                    type: 'GET',
                    url: '@Url.Action("GetCallPurpose", "CRMCalls")',
                    data: chartFilter,
                           success: function (data) {
                        LoadCallPurposeData(data);
                    },
                    error: function (ex) {
                        console.log(ex);
                    }
                });
        };

        function LoadCallTrend(chartFilter)
        {

                 $.ajax({
                    type: 'GET',
                     url: '@Url.Action("GetCallTrends", "CRMCalls")',
                     data: chartFilter,
                     success: function (data) {
                         LoadCallTrendData(data);
                    },
                    error: function (ex) {
                console.log(ex);
            }
        });
        };

        function LoadCallVolumeData(data)
        {
            callVolumeData = data;

            var r = () => Math.random() * 256 >> 0;
            var ctx = document.getElementById('stackChartVolume');
            var myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: callVolumeData.labs,
                    datasets: [
                        {
                            label: callVolumeData.callTypes[0],
                            data: callVolumeData.countData[0],
                            backgroundColor: chartColors.red
                        },
                        {
                            label: callVolumeData.callTypes[1],
                            data: callVolumeData.countData[1],
                            backgroundColor: chartColors.blue
                        },
                        {
                            label: callVolumeData.callTypes[2],
                            data: callVolumeData.countData[2],
                            backgroundColor: chartColors.green
                        }
                    ]
                },
                options: {
                    scales: {
                        xAxes: [{
                            ticks: {
                                beginAtZero: true
                            },
                            stacked: true,
                            offset: true

                        }],
                        yAxes: [{
                            ticks: {
                                beginAtZero: true
                            },
                            stacked: true,
                            offset: true
                        }]
                    },
                        tooltips: {
                        mode: 'index',
                        intersect: false
                    },
                    ticks: {
                        beginAtZero: true,   // minimum value will be 0.,
                        stepSize: 1
                    }
                }
            });
 }

        function LoadCallPurposeData(data) {

            CallPurposeData = data;

            toggleChartBlocks('show');

            var sum = CallPurposeData.sumData.reduce(function (a, b) {
                return parseInt(a) + parseInt(b);
            }, 0);

            if (sum > 0) {


                //var backgroundColorArr = [];

                //for (i = 0; i < CallPurposeData.purposes.length; i++) {


                //    backgroundColorArr.push(
                //        getRandomColor())
                //};
    
                chrtlbls = CallPurposeData.purposes;
                var ctx = document.getElementById('piechartpurpose');
                var myChart = new Chart(ctx, {
                    type: 'pie',
                    data: {
                        datasets: [{
                            data: CallPurposeData.sumData,
                            //backgroundColor: backgroundColorArr
                            backgroundColor: getColors(CallPurposeData.purposes.length)
                        }],
                        labels: chrtlbls,
                    },
                    options: {
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        },
                        responsive: true,
                    }
                });

                var ctx = document.getElementById('stackChartpurpose');

                var barpurposes = [];
                var bardata = [];
                var mybarChart = new Chart(ctx, {
                    type: 'bar',

                    data: {
                        labels: CallPurposeData.labs
                    },
                    options: {
                        tooltips: {
                            mode: 'index',
                            intersect: false
                        },
                        responsive: true,
                        scales: {
                            xAxes: [{
                                stacked: true,
                            }],
                            yAxes: [{
                                stacked: true
                            }]
                        }
                    }
                });

                for (i = 0; i < CallPurposeData.purposes.length; i++) {

                    mybarChart.data.datasets.push({
                        label: CallPurposeData.purposes[i],
                        backgroundColor: pallet[i],
                        data: CallPurposeData.countData[i]
                    });

                }
                mybarChart.update();
            }
            else {
                toggleChartBlocks('hide');
            }

        }

        function LoadCallTrendData(data) {
            callTrendData = data;
            var ctx = document.getElementById('lineChartTrend');
            var period = callTrendData.period;
            var myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: period,
                    datasets: [
                        {
                            label: callTrendData.callTypes[0],
                            data: callTrendData.countData[0],
                            backgroundColor: chartColors.red,
                            borderColor: chartColors.red,
                            fill: false
                        },
                        {
                            label: callTrendData.callTypes[1],
                            data: callTrendData.countData[1],
                            backgroundColor: chartColors.blue,
                            borderColor: chartColors.blue,
                            fill: false
                        },
                        {
                            label: callTrendData.callTypes[2],
                            data: callTrendData.countData[2],
                            backgroundColor: chartColors.green,
                            borderColor: chartColors.green,
                            fill: false
                        }

                    ]
                },
                options: {
                    scales: {
                        xAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true,
                                labelString: 'Lab Name * :' + labNamefull
                            }
                        }],
                        yAxes: [{
                            display: true,
                            scaleLabel: {
                                display: true
                            }
                        }]
                    },
                   tooltips: {
                        mode: 'index',
                        intersect: false
                    },
                    ticks: {
                        beginAtZero: true
                   }
                }
            });

        }

        function toggleChartBlocks(action) {

            if (action == 'hide') {
                document.getElementById("piechartpurpose").style.display = "none"
                document.getElementById("stackChartpurpose").style.display = "none"
                document.getElementById("purposepiechrt").style.display = "block"
                document.getElementById("purposestackchrt").style.display = "block"
            }
            else if (action == 'show') {
                document.getElementById("piechartpurpose").style.display = "block"
                document.getElementById("stackChartpurpose").style.display = "block"
                document.getElementById("purposepiechrt").style.display = "none"
                document.getElementById("purposestackchrt").style.display = "none"
            }
        }

    });



</script>

<style>
    .spacing {
        padding-bottom: 10px;
    }

    .chartsize {
        display: block;
        align-content: center !important;
        height: 450px !important;
        width: 920px !important;
        padding-left: 100px !important;
    }
</style>

<div class="container">

    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6 text-center spacing">
            @Html.LabelFor(model => model.FromDate)
        </div>
        <div class="col-sm-6 col-md-6 col-lg-6 spacing">
            @Html.TextBoxFor(model => model.FromDate, "{0:MM/dd/yyyy}", new { @class = "form-control", @id = "fromDatePicker" })
        </div>
    </div>

    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6 text-center spacing">
            @Html.LabelFor(model => model.ToDate)
        </div>
        <div class="col-sm-6 col-md-6 col-lg-6 spacing">
            @Html.TextBoxFor(model => model.ToDate, "{0:MM/dd/yyyy}", new { @class = "form-control", @id = "toDatepicker" })
        </div>
    </div>

    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6 text-center spacing">
            @Html.LabelFor(model => model.LabName)
        </div>
        <div class="col-sm-6 col-md-6 col-lg-6 spacing">
            @Html.DropDownListFor(model => model.LabName, (IEnumerable<SelectListItem>)ViewData["PCCNames"],
           "All", htmlAttributes: new { @class = "form-control", @id = "ddlLabName" })
        </div>

    </div>

    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6 text-center spacing">
        </div>
        <div class="col-sm-6 col-md-6 col-lg-6 spacing" style="color: brown">
            * Applicable only for 'Call Trend Chart - Line'
        </div>

    </div>

    <div class="row">
        <div class="col-sm-6 col-md-6 col-lg-6 text-right spacing"></div>
        <div class="col-sm-6 col-md-6 col-lg-6 spacing">
            <button type="button" class="btn btn-success" id="btnsubmit">Submit</button>
        </div>

    </div>
</div>

<hr />
<br />

<div class="container">
    <div class="row">
        <div class="card col-xs-12 col-md-12 col-lg-12">
            <div class="card-header text-center"><h4><b>Call Purpose Chart - Pie</b></h4></div>
            <div class="card-body">
                <canvas id="piechartpurpose"></canvas>
                <div id="purposepiechrt"  class="text-center">No Data to Prepare Chart !!!</div>
            </div>
        </div>
    </div>

    <hr />
    <br />
    <div class="row">
        <div class="card col-xs-12 col-md-12 col-lg-12">
            <div class="card-header text-center"> <h4><b>Call Purpose Chart - Stack </b></h4></div>
        </div>
        <div class="card-body">
            <canvas id="stackChartpurpose"></canvas>
            <div id="purposestackchrt"  class="text-center">No Data to Prepare Chart !!!</div>
        </div>
    </div>

    <hr />
    <br />
    <div class="row">
        <div class="card col-xs-12 col-md-12 col-lg-12">
            <div class="card-header text-center"><h4><b>Call Volume Chart - Stack </b></h4></div>
            <div class="card-body">
                <canvas id="stackChartVolume"></canvas>
            </div>
        </div>
    </div>
    <hr />
    <br />
    <div class="row">
        <div class="card col-xs-12 col-md-12 col-lg-12">
            <div class="card-header text-center"><h4><b>Call Trend Chart - Line </b></h4></div>
            <div class="card-body">
                <canvas id="lineChartTrend"></canvas>
            </div>
        </div>
    </div>
</div>