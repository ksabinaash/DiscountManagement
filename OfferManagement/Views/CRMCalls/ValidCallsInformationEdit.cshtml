@model OfferManagement.Models.ValidCall

<script>
    $(document).ready(function () {
        //https://getdatepicker.com/4/
        var todayDate = new Date().getDate();

        $('#datetimepicker').datepicker({
            "format": 'mm-dd-yyyy',
            "autoclose": true,
            "startDate": todayDate
        });

        var actionName = $("#ddlAction option:selected").text();
        if (actionName.includes('Follow')) {
            $('#datetimepicker').prop('readonly', false);
        }
        else {
            $('#datetimepicker').prop('readonly', true);
        }

        if (@ViewData["enableForm"]!= null) {
            enableForm = @ViewData["enableForm"].ToString();
        }
        else {
            enableForm = false;
        }

        console.log("enableForm" + enableForm);

        if (enableForm == true) {
            $('#validCallsEditForm *').prop('disabled', false);
        }
        else {
            $('#validCallsEditForm *').prop('disabled', true);
        }

        $("#ddlAction").change(function () {

            var followUpDate = $('#datetimepicker').val();
            var actionName = $("#ddlAction option:selected").text();
            if (actionName.includes('Follow'))
            {
               $('#datetimepicker').prop('readonly', false);
            }
            else
            {
               var followUpDate = $('#datetimepicker').val();
               $('#datetimepicker').prop('readonly', true);
            }
        });



    });

</script>


@using (Html.BeginForm("UpdateValidCallModel", "CRMCalls", FormMethod.Post, new { @id = "validCallsEditForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.ValidCallId, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.ValidCallId, new { htmlAttributes = new { @class = "form-control" , @readonly="readonly"} })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.EventTime, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LabName, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.LabName, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerMobileNumber, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.CustomerMobileNumber, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CallPurpose, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.CallPurpose,
                     ((List<string>)Session["CallPurpose"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Purpose",
                         htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CallPurpose, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Action, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.Action,
                     ((List<string>)Session["CallActions"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Action",
                          htmlAttributes: new { @class = "form-control", @id = "ddlAction" })
                @Html.ValidationMessageFor(model => model.Action, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FollowUpTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.TextBoxFor(model => model.FollowUpTime, "{0:MM-dd-yyyy}", new { @class = "form-control", @id = "datetimepicker" })
                @Html.ValidationMessageFor(model => model.FollowUpTime, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            <div class="col-md-offset-2 col-md-3 col-sm-6">
                <input type="submit" id="btnSave" value="Save" onclick="" class="btn btn-primary" />
            </div>
        </div>
    </div>
    }

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/bootstrap")
    }
