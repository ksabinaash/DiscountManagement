@model OfferManagement.Models.ValidCall

<script>
    $(document).ready(function () {

        $('#datetimepicker').prop('readonly', true);

        var savedDate = new Date();

        var model = @Html.Raw(Json.Encode(Model));

        var followUpTime = @Html.Raw(Json.Encode(Model.FollowUpTime));

        if (followUpTime != null) {

            //console.log(followUpTime)

            //savedDate = new Date(followUpTime.Value.Year, followUpTime.Value.Month - 1, followUpTime.Value.Day, followUpTime.Value.Hour, followUpTime.Value.Minute);
        }

        $('#datetimepicker').datetimepicker({
            defaultDate: savedDate,
            step: 30,
            theme: 'dark',
            minDate: new Date()
        });

        var actionName = $("#ddlAction option:selected").text();

        if (actionName.includes('Follow')) {

           //`\$('#datetimepicker').prop('readonly', false);
            $('#datetimepicker').prop('disabled', false);
        }
        else {
            //$("#datetimepicker").attr('readonly', true);
            $('#datetimepicker').prop('disabled', true);
        }

        @*if (@ViewData["enableForm"]!= null) {
            enableForm = @ViewData["enableForm"].ToString();
        }
        else {
            enableForm = false;
        }*@


        if (!actionName.includes('Close')) {
            $('#validCallsEditForm *').prop('disabled', false);
        }
        else {
            $('#validCallsEditForm *').prop('disabled', true);
        }



        //if (enableForm == true) {
        //    $('#validCallsEditForm *').prop('disabled', false);
        //}
        //else {
        //    $('#validCallsEditForm *').prop('disabled', true);
        //}

        $("#ddlAction").change(function () {
            var actionName = $("#ddlAction option:selected").text();

            if (actionName.includes('Follow')) {
                $('#datetimepicker').prop('disabled', false);
            }
            else if (actionName.includes('Close')) {
                $('#datetimepicker').prop('disabled', true);
            }
            else if (actionName.includes('Select a Action'))
            {
                $('#datetimepicker').prop('disabled', true);

                //$('#datetimepicker').datetimepicker('setDate', null);

                $('#datetimepicker').val('').datetimepicker('update');
            }
        });

        //$(document).on("click", "#btnSave", function (e) {
        //    var UpdateValidCallModelForm = $('#validCallsEditForm').serialize();
        //    console.log(UpdateValidCallModelForm);

        //    $.ajax({
        //        url: "/CRMCalls/UpdateValidCallModel",
        //        type: "POST",
        //        data: UpdateValidCallModelForm,
        //        success: function (result) {
        //            alert("Success");
        //        }
        //    })
        //});

        ////$("#validCallsEditForm").submit(function (e) {


        ////    console.log(model);


        ////   e.preventDefault();
        ////    if ($('#validCallsEditForm').valid()) {

        ////        console.log($(this));
        ////        console.log($(this).valid());
        ////        console.log($(this).serialize());


        ////        $.ajax({
        ////            type: "POST",
        ////            url: $(this).attr('action'),
        ////            data: $(this).serialize(),
        ////            success: function (res) {
        ////                alert("Records added Successfully.");
        ////            }
        ////        });
        ////    }
        //});

    });

</script>


@using (Html.BeginForm("UpdateValidCallModel", "CRMCalls", FormMethod.Post, new { @id = "validCallsEditForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        
        <div class="form-group">
            @Html.LabelFor(model => model.ValidCallId, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.ValidCallId, new { htmlAttributes = new { @class = "form-control" , @readonly="readonly"} })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.EventTime, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LabName, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.LabName, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerMobileNumber, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.CustomerMobileNumber, new { htmlAttributes = new { @class = "form-control", @readonly="readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CallPurpose, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.CallPurpose,
                     ((List<string>)Session["CallPurpose"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Purpose",
                         htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CallPurpose, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Action, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.Action,
                     ((List<string>)Session["CallActions"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Action",
                          htmlAttributes: new { @class = "form-control", @id = "ddlAction" })
                @Html.ValidationMessageFor(model => model.Action, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FollowUpTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.FollowUpTime, 
               new { htmlAttributes = new { @class = "form-control", @id = "datetimepicker" } })
                @Html.ValidationMessageFor(model => model.FollowUpTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-3 col-sm-6">
                <input type="submit" id="btnSave" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        @Styles.Render("~/Content/css")
        @Scripts.Render("~/bundles/bootstrap")
    }
