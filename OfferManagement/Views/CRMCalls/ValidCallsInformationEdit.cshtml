@model OfferManagement.Models.ValidCallEdit

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script>
    $(document).ready(function () {

        $('#datetimepicker').prop('readonly', true);

        $("#validCallsEditForm").submit(function (e) {
            e.preventDefault();

            if ($("#ddlPurpose option:selected").text().includes("Select") || $("#ddlAction option:selected").text().includes("Select") || $('#txtComment').val() == "" || $('#txtComment').val() == null) {
                return;
            }
            else {
                if ($("#ddlAction option:selected").text().includes("Follow") && ($('#datetimepicker').val() == "" || $('#datetimepicker').val() == null)) {
                    return;
                }

                var params = {
                    'validCallId': $("#txtValidCallId").val(),
                    'purpose': $("#ddlPurpose option:selected").text(),
                    'action': $("#ddlAction option:selected").text(),
                    'comment': $('#txtComment').val(),
                    'followUpTime': $('#datetimepicker').val()
                };

                $.ajax({
                    type: "POST",
                    url: "/CRMCalls/UpdateValidCallModel",
                    data: params,
                    success: function (res) {
                        alert("Record Updated Successfully.");
                        $('#validCallsModal').modal('hide');
                        new MvcGrid(document.querySelector('.mvc-grid')).reload();
                    }

                });
            }

        });

        $('#datetimepicker').datetimepicker({
            defaultDate: new Date(),
            step: 30,
            theme: 'dark',
            minDate: new Date()
        });

        var actionName = $("#ddlAction option:selected").text();

        if (actionName.includes('Follow')) {

            $('#datetimepicker').prop('disabled', false);
        }
        else {
            $('#datetimepicker').prop('disabled', true);
        }

        if (!actionName.includes('Close')) {
            $('#validCallsEditForm *').prop('disabled', false);
        }
        else {
            $('#validCallsEditForm *').prop('disabled', true);
        }

        $("#ddlAction").change(function () {
            var actionName = $("#ddlAction option:selected").text();

            if (actionName.includes('Follow')) {
                $('#datetimepicker').prop('disabled', false);
            }
            else if (actionName.includes('Close')) {
                $('#datetimepicker').prop('disabled', true);
            }
            else if (actionName.includes('Select a Action')) {
                $('#datetimepicker').prop('disabled', true);

                $('#datetimepicker').val('').datetimepicker('update');
            }
        });

    });

</script>

@using (Html.BeginForm("UpdateValidCallModel", "CRMCalls", FormMethod.Post, new { @id = "validCallsEditForm" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.ValidCallId, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.ValidCallId, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly", @id = "txtValidCallId" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EventTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.EventTime, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LabName, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.LabName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CustomerMobileNumber, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.CustomerMobileNumber, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CallPurpose, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.CallPurpose,
                     ((List<string>)Session["CallPurpose"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Purpose",
                         htmlAttributes: new { @class = "form-control", @id = "ddlPurpose" })
                @Html.ValidationMessageFor(model => model.CallPurpose, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Action, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.DropDownListFor(model => model.Action,
                     ((List<string>)Session["CallActions"]).Select(m => new SelectListItem { Text = m, Value = m }), "Select a Action",
                          htmlAttributes: new { @class = "form-control", @id = "ddlAction" })
                @Html.ValidationMessageFor(model => model.Action, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.Comment, new { htmlAttributes = new { @class = "form-control", @id = "txtComment" } })
                @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FollowUpTime, htmlAttributes: new { @class = "control-label col-md-2 col-sm-6" })
            <div class="col-md-3 col-sm-6">
                @Html.EditorFor(model => model.FollowUpTime,
               new { htmlAttributes = new { @class = "form-control", @id = "datetimepicker" } })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-2 col-sm-6">
            </div>
            <div class="col-md-3 col-sm-6">
                <p style="color: brown">*Mandatory Fields</p> <p style="color: brown">**Mandatory for 'Follow up' action</p>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-3 col-sm-6">
                <input type="submit" id="btnSave" value="Save" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/bootstrap")
}
